# Makefile.local for frb-analysis (the CHIMEFRB compute node at DRAO)
#
# Note: this Makefile.local assumes that you're using the CentOS system python (/usr/bin/python),
# and a numpy instance which has been installed (by pip install â€“user) in $HOME/.local.
#
# This will be the case if you're following the instructions here:
#   https://kmsmith137.github.io/ch_frb_l1_docs/installation.html#quick-install-frb-analysis
#
# Otherwise (e.g. if you're using the frb-analysis anaconda python/numpy) this file will need
# modifications.


# Directory where executables will be installed
BINDIR=$(HOME)/bin

#
# C++ command line
# Don't forget -std=c++11 -pthread -fPIC
# Don't forget -march=native, since __AVX2__ is tested
#
DEBUG ?= no
ifeq ($(DEBUG),no)
     CPP=g++ -std=c++11 -pthread -fPIC -march=native -Wall -O3 -ffast-math -funroll-loops -I. -I/usr/include/jsoncpp -I$(HOME)/include
else
     CPP=g++ -std=c++11 -pthread -fPIC -march=native -Wall -O0 -g -ffast-math -funroll-loops -I. -I/usr/include/jsoncpp -I$(HOME)/include
endif

# Any C++ flags which should only be specified when linking 
# Don't forget to put -L. and -L$(LIBDIR) on the command line (in this order)
# Don't forget to add . and $(LIBDIR) in your LD_LIBRARY_PATH environment variable (in this order)
CPP_LFLAGS=-L. -L$(HOME)/lib

# We use the C (not C++) compiler only once: to compile civetweb/civetweb.o.
CC=gcc -pthread -fPIC -Wall -O3 -march=native -ffast-math -funroll-loops -I. -I/usr/include/jsoncpp -I$(HOME)/include
